        String str = new String("example");
        // creating Java string by new keyword
        // this statement create two object i.e
        // first the object is created in heap
        // memory area and second the object is
        // created in String constant pool.

Interfaces and Classes in Strings in Java
=========================================
CharBuffer: This class implements the CharSequence interface. This class is used to allow character buffers to be used in place of CharSequences. An example of such usage is the regular-expression package java.util.regex.

String: It is a sequence of characters. In Java, objects of String are immutable which means a constant and cannot be changed once created.

CharSequence Interface
=======================
CharSequence Interface is used for representing the sequence of Characters in Java.
Classes that are implemented using the CharSequence interface are mentioned below and these provides much of functionality like substring, lastoccurence, first occurence, concatenate , toupper, tolower etc.

String== Thread Safe
==================
String is an immutable class which means a constant and cannot be changed once created and if wish to change , we need to create an new object and even the functionality it provides like toupper, tolower, etc all these return a new object , its not modify the original object. It is automatically thread safe.

StringBuffer=== Thread Safe
=========================
StringBuffer is a peer class of String, it is mutable in nature and it is thread safe class , we can use it when we have multi threaded environment and shared object of string buffer i.e, used by mutiple thread. As it is thread safe so there is extra overhead, so it is mainly used for multithreaded program.


StringBuilder==Not thread Safe
==============================

Genral Diff between all these three
===================================

Mutability Difference:

String is immutable. If you try to alter their values, another object gets created, whereas StringBuffer and StringBuilder are mutable, so they can change their values.

Thread-Safety Difference:

The difference between StringBuffer and StringBuilder is that StringBuffer is threadsafe. So when the application needs to be run only in a single thread, then it is better to use StringBuilder. StringBuilder is more efficient than StringBuffer.

Situations:

If your string is not going to change use a String class, because a String object is immutable.
If your string can change (example: lots of logic and operations in the construction of the string) and will only be accessed from a single thread, using a StringBuilder is good enough.
If your string can change, and will be accessed from multiple threads, use a StringBuffer because StringBuffer is synchronous so you have thread-safety.


Link about String Pool
======================
https://www.baeldung.com/java-string-constant-pool-heap-stack
=====================


Why Java uses the concept of string literal?
============================================
To make Java more memory efficient (because no new objects are created if it exists already in the string constant pool).

Top String methods used in frequent manners
============================================
1. String literal
---------------------
String s = “GeeksforGeeks”;

2. Using new keyword
--------------------
String s = new String (“GeeksforGeeks”);

3. String(char[] char_arr)
---------------------------
Allocates a new String from the given Character array
char char_arr[] = {'G', 'e', 'e', 'k', 's'};
String s = new String(char_arr); //Geeks

// from stringBuffer
--------------------
StringBuffer s_buffer = new StringBuffer("Geeks");
String s = new String(s_buffer); //Geeks

// from StringBuilder
-----------------------
StringBuilder sb1=new StringBuilder("AmreshGeeks");
String s=new String(sb1);

// methods
===========
length()
charAt(i)
substring(from_index,to_index)
concat()
--------
String str1="amresh";
String str2="ranjan";
String str3=str1.concat(str2); //amreshranjan
-------------
indexof()
--------
Returns the index within the string of the first occurrence of the specified string.

If String s is not present in input string then -1 is returned as the default value.

equals()
equalsIgnoreCase()
compareTo()
-----------
Compares two string lexicographically.
 int out = s1.compareTo(s2);
// where s1 and s2 are
// strings to be compared
 This returns difference s1-s2. If :
 out < 0  // s1 comes before s2
 out = 0  // s1 and s2 are equal.
 out > 0   // s1 comes after s2.

compareToIgnoreCase()
toLowerCase()
toUpperCase()
trim() // remove white space from starting and end not affect middle spaces.

replace() //Returns new string by replacing all occurrences of oldChar with newChar.

contains("str") // Returns true if string contains contains the given string

toCharArray()
startsWith()
endWith()